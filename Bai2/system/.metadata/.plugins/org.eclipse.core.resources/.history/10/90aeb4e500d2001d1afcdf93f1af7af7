#include <stdio.h>
#include "io.h"
#include "system.h"
#include "altera_avalon_timer_regs.h"
#include "sys/alt_irq.h"

#define LED_BASE (volatile unsigned int*)0x41050
#define SWITCH_BASE (volatile unsigned int*)0x41040
#define TIMER_0_BASE 0x41000
unsigned int counter = 0;
unsigned char led_state = 0;

void timer_Init(){
    unsigned int period = 0;
    // Stop Timer
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    //Configure period
    period = 10000 - 1; // 50 kHz
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, period);
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, (period >> 16));
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK);
}

void Timer_IRQ_Handler(void* isr_context){
    counter ++;
    printf("timer irq in %d times\n", counter);

    // Read the value of the switches and update the state of the LEDS
    unsigned char switch_state = *SWITCH_BASE & 0x3;
    if (switch_state == 0) {
        led_state = 0;
    } else if (switch_state == 1) {
        led_state = 0x55;
    } else if (switch_state == 2) {
        led_state = 0xAA;
    } else {
        led_state = 0xFF;
    }

    // Write the state of the LEDs to the hardware
    *LED_BASE = led_state;

    // Clear Timer interrupt bit
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, ALTERA_AVALON_TIMER_STATUS_TO_MSK);
}

int main(){
    timer_Init();
    alt_ic_isr_register(0, TIMER_0_IRQ, Timer_IRQ_Handler, (void*)0, (void*)0);
    while(1);
    return 0;
}
